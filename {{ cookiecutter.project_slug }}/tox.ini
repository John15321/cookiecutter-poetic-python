; How to use tox commands:
; tox -e *enviroment name*
; the "-e" flag specifies that you want to use an enviroment
; Example usage of a command:
; tox -e lint
; If a tox command is more complicated and requiores some arguments it should have
; en example of its usage as a comment above its testenv definition

[tox]
envlist  =
    lint,
    test,
    ;     py{38,39,310}-test,
    type_checking,
    formatting,
    imports
skip_install = true
skip_missing_interpreters=False
sitr_dist_name=sample_template_package
isolated_build=true
whitelist_externals=poetry



;;;;;;;;;;;;;;;;;;;;;;;;;
; TESTENV CONFIGURATION ;
;;;;;;;;;;;;;;;;;;;;;;;;;
[testenv]
; setenv  =




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PROJECT INFO PROPERTIES DEFINITION ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[project-info]
project=sample_template_package
package=sample_template_package
whitelist_externals=
    git
    poetry
passenv=docs/
; Package source code configuration
src_dir=src/
tests_dir=tests/
test_dir=tests/

[format-config]
; Max line length in a python file
maxll=88




;;;;;;;;;;;;;;;;;;;;;;;
; COMMANDS DEFINITION ;
;;;;;;;;;;;;;;;;;;;;;;;

[commands]
; PACKAGE
poetry_build=poetry build
poetry_install=poetry install

; ISORT
cmd_isort=isort --verbose --profile=black --line-length={[format-config]maxll} {[project-info]src_dir} {[project-info]tests_dir}
cmd_isort_check={[commands]cmd_isort} --diff --check

; BLACK FORMATTER
cmd_black=black --verbose --line-length={[format-config]maxll} {[project-info]src_dir} {[project-info]tests_dir}
cmd_black_check={[commands]cmd_black} --diff --check

; MYPY STATIC CHECKER
cmd_mypy=mypy --ignore-missing-imports {[project-info]src_dir} {[project-info]tests_dir}

; PYLINT LINTER
cmd_pylint  =
    pylint -d duplicate-code {[project-info]test_dir}
    pylint {[project-info]src_dir}{[project-info]package}

; DOCUMENTATION
build_sphinx_docs=poetry run sphinx-build -b html docs/ docs/_build -E -c docs/

; PYTEST TESTING
pytest_test=pytest {[project-info]test_dir} --junitxml=junit-{envname}.xml  {posargs}
pytest_cov=pytest {[project-info]test_dir} --cov {[project-info]project} --cov-branch --cov-report term-missing {posargs} --cov-report=html --cov-report=xml:coverage-cov.xml

;;;;;;;;;;;;;;;;;;;;
; PACKAGE COMMANDS ;
;;;;;;;;;;;;;;;;;;;;

; Build package
[testenv:build]
skip_install = true
whitelist_externals={[project-info]whitelist_externals}
commands=
    {[commands]poetry_build} {posargs}

; Install package
[testenv:install]
skip_install = true
whitelist_externals={[project-info]whitelist_externals}
commands=
    {[commands]poetry_install} {posargs}



;;;;;;;;;;;;;;;;;;;;;;
; SOURCE CODE CHECKS ;
;;;;;;;;;;;;;;;;;;;;;;

; Check linting
[testenv:lint]
skip_install = true
whitelist_externals={[project-info]whitelist_externals}
commands=
    poetry install --only lint
    poetry install --only test
    {[commands]cmd_pylint} {posargs}


; Check types
[testenv:type_checking]
skip_install = true
whitelist_externals={[project-info]whitelist_externals}
commands=
    poetry install --only type_check
    {[commands]cmd_mypy} {posargs}


; Check formatting of the source code
[testenv:check_format]
skip_install = true
whitelist_externals={[project-info]whitelist_externals}
commands=
    poetry install --only format
    {[commands]cmd_isort_check}
    {[commands]cmd_black_check}


; Check code formatting
[testenv:formatting]
skip_install = true
whitelist_externals={[project-info]whitelist_externals}
commands=
    poetry install --only format
    {[commands]cmd_black_check} {posargs}


; Check imports formatting
[testenv:imports]
skip_install = true
whitelist_externals={[project-info]whitelist_externals}
commands=
    poetry install --only format
    {[commands]cmd_isort_check} {posargs}


; Check formatting, typing and linting
[testenv:check_all]
skip_install = true
whitelist_externals={[project-info]whitelist_externals}
commands=
    poetry install --only format
    poetry install --only type_check 
    poetry install --only lint
    poetry install --only test
    {[commands]cmd_isort_check}
    {[commands]cmd_black_check}
    {[commands]cmd_pylint}
    {[commands]cmd_mypy}



;;;;;;;;;;;;;;;;;;;;;;;;;;
; SOURCE CODE FORMATTERS ;
;;;;;;;;;;;;;;;;;;;;;;;;;;

; Format the source code
[testenv:format]
whitelist_externals={[project-info]whitelist_externals}
skip_install = true
commands  =
    poetry install --only format
    {[commands]cmd_isort}
    {[commands]cmd_black}


; First format the source code, and then check linting and static typing
[testenv:fc]
whitelist_externals={[project-info]whitelist_externals}
skip_install = true
commands  =
    poetry install --only format lint type_check
    {[commands]cmd_isort}
    {[commands]cmd_black}
    {[commands]cmd_mypy}
    {[commands]cmd_pylint}




;;;;;;;;;;;;;;;;;
; DOCUMENTATION ;
;;;;;;;;;;;;;;;;;

; Generate documentation
[testenv:doc]
passenv={[project-info]passenv}
whitelist_externals={[project-info]whitelist_externals}
skip_install = true
commands  =
    poetry install --only docs
    {[commands]build_sphinx_docs} {posargs}




;;;;;;;;;;;
; TESTING ;
;;;;;;;;;;;

; Check the test coverage
[testenv:cov]
passenv={[project-info]passenv}
whitelist_externals={[project-info]whitelist_externals}
skip_install = true
commands  =
    poetry install --only test
    {[commands]pytest_cov} {posargs}


; Run logic tests
[testenv:test]
passenv={[project-info]passenv}
whitelist_externals={[project-info]whitelist_externals}
skip_install = true
commands  =
    poetry install --only test
    {[commands]pytest_test} {posargs}




;;;;;;;;;;;;;;;;;
; MISCELLANEOUS ;
;;;;;;;;;;;;;;;;;
